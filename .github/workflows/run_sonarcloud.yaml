name: Run SonarCloud

on:
  workflow_call:
    inputs:

      iteration:
        required: true
        type: string

      chart_folder:
        required: true
        type: string
    
    secrets:
      
        SONAR_TOKEN: 
          description: 'SonarCloud API token'
          required: true

jobs:

  run_sonarcloud:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'main'
          fetch-depth: 0

      - name: Define template chart folder - original
        if: ${{ inputs.iteration == '1'}}
        run: echo "TEMPLATE=templates/${{ inputs.chart_folder }}_template.yaml" >> $GITHUB_ENV

      - name: Define template chart folder - fixed
        if: ${{ inputs.iteration == '2'}}
        run: echo "TEMPLATE=fixed_templates/${{ inputs.chart_folder }}_${{ inputs.first_tool }}_fixed_template.yaml" >> $GITHUB_ENV

      - name: Define template chart folder - functionalities
        if: ${{ inputs.iteration == '3'}}
        run: echo "TEMPLATE=functionality_templates/${{ inputs.chart_folder }}_func_template.yaml" >> $GITHUB_ENV

      - name: Run SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3.1
        with:
          projectBaseDir: mysql/
          args: >
            -Dsonar.organization=fminna
            -Dsonar.projectKey=fminna_mycharts
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.verbose=true
      # -Dsonar.projectName=mycharts
      # -Dsonar.log_level=DEBUG
      # -Dsonar.scanner.dumpToFile=sonar-scanner-dump.log
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      # - name: Fetch SonarCloud Report
      #   shell: bash
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     PROJECT_KEY="fminna_mycharts"
      #     METRIC_KEYS="accepted_issues%2Cnew_technical_debt%2Cblocker_violations%2Cbugs%2Cclasses%2Ccode_smells%2Ccognitive_complexity%2Ccomment_lines%2Ccomment_lines_density%2Cbranch_coverage%2Cnew_branch_coverage%2Cconditions_to_cover%2Cnew_conditions_to_cover%2Cconfirmed_issues%2Ccoverage%2Cnew_coverage%2Ccritical_violations%2Ccomplexity%2Cduplicated_blocks%2Cnew_duplicated_blocks%2Cduplicated_files%2Cduplicated_lines%2Cduplicated_lines_density%2Cnew_duplicated_lines_density%2Cnew_duplicated_lines%2Ceffort_to_reach_maintainability_rating_a%2Cfalse_positive_issues%2Cfiles%2Cfunctions%2Cgenerated_lines%2Cgenerated_ncloc%2Chigh_impact_accepted_issues%2Cinfo_violations%2Cviolations%2Cline_coverage%2Cnew_line_coverage%2Clines%2Cncloc%2Clines_to_cover%2Cnew_lines_to_cover%2Csqale_rating%2Cnew_maintainability_rating%2Cmajor_violations%2Cminor_violations%2Cnew_accepted_issues%2Cnew_blocker_violations%2Cnew_bugs%2Cnew_code_smells%2Cnew_critical_violations%2Cnew_info_violations%2Cnew_violations%2Cnew_lines%2Cnew_major_violations%2Cnew_minor_violations%2Cnew_security_hotspots%2Cnew_vulnerabilities%2Copen_issues%2Cprojects%2Calert_status%2Creliability_rating%2Cnew_reliability_rating%2Creliability_remediation_effort%2Cnew_reliability_remediation_effort%2Creopened_issues%2Csecurity_hotspots%2Csecurity_hotspots_reviewed%2Cnew_security_hotspots_reviewed%2Csecurity_rating%2Cnew_security_rating%2Csecurity_remediation_effort%2Cnew_security_remediation_effort%2Csecurity_review_rating%2Cnew_security_review_rating%2Cskipped_tests%2Cstatements%2Csqale_index%2Csqale_debt_ratio%2Cnew_sqale_debt_ratio%2Cuncovered_conditions%2Cnew_uncovered_conditions%2Cuncovered_lines%2Cnew_uncovered_lines%2Ctest_execution_time%2Ctest_errors%2Ctest_failures%2Ctest_success_density%2Ctests%2Cvulnerabilities%2Cwont_fix_issues"
      #     SONAR_API="https://sonarcloud.io/api/measures/component?metricKeys=${METRIC_KEYS}&component=${PROJECT_KEY}&additionalFields=periods"

      #     curl --request GET --url $SONAR_API > results_${{ inputs.iteration }}.json
      
      # - name: Print SonarCloud result
      #   shell: bash
      #   run: jq . results_${{ inputs.iteration }}.json

      # - name: Upload the JASON results artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: results_${{ inputs.iteration }}
      #     path: results_${{ inputs.iteration }}.json
      #     if-no-files-found: error
      
      # - name: Clean up sonar-project.properties
      #   shell: bash
      #   run: rm ${{ inputs.chart_folder }}/sonar-project.properties


      
